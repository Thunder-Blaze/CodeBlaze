/* #ff3368 #ecfdff */

/* 
*    Selector
*       |
*       h1 {
*           color: blue;
*       }     |       |
*          Property  Value
*    
*    And (Property + Value) is called Declaration

*/

/* ! Specificity of Inline CSS > Internal CSS > External CSS */

h1 {
    color: #ff3368;
}

/*
    * Selectors
        * Universal Selector
            *
        * Class Selectors
            .class
        * Id Selectors
            #id
        * Tag Selectors
            tag
*/


/* 
? We can use aspect-ratio when we have to change height and width accordingly
*/



.para {
    color: green;
}

#btn {
    background: #ff3368;
    color: #FFF;
}

/*
? Pseudo Classes
?   1. :hover
?   2. :first-child
?   3. :last-child
?   4. :nth-child(n)
?   5. :first-of-type
?   6. :last-of-type
*/

/*
? Pseudo Elements
?   1. ::before
?   2. ::after
?   3. ::first-letter
?   4. ::first-line
?   5. ::selection
?   6. ::placeholder
*/

#btn:hover {
    background: black;
}

h1:hover {
    color: lightseagreen;
}


/* 
! Color Schemes
!   1. Name
!   2. RGB
!   3. RGBA
!   4. HEX
!   5. HSL
!   6. HSLA
*/

#btn{
    background: transparent;
    background: currentColor;
    background: #444;
    color: aqua;
    color: rgb(0,255,255);
    color: rgba(0,255,255,0.5);
    color: #00ffff;
    color: #00ffffff;
    color: hsla(180, 100%, 50%,0.5);
    color: hsl(180, 100%, 50%);
}

/*
? Color Properties
* Transparent is a pre-defined color in CSS
* Current Color takes the value of the color of parent
* HUE   = Pure Color
* TINT  = Pure Color with just White added
* SHADE = Pure Color with just Black added
* TONE  = Pure Color with just Grey added
*/



/*
? Background Properties
* background-color          - to add color
* background-image          - to add img [using url(link)]
* background-repeat         - to specify whether the image should appear more than one or not
* background-position       - specify the position
* background-size           - bg size [auto, cover, contain, percentages, or length values] 
* background-attachment     - [scroll, fixed, local]
* background-blend-mode     - [multiply, screen, overlay]
*/


/* 
? Units in CSS
* 1. Absolute Lengths
*       > Pixels (px)
*       > Inches (in)
*       > Points (pt)
* 2. Relative Lengths
*       > em
*       > Root em (rem)
*       > Percentage (%)
*       > Viewport height (vh)
*       > Viewport width (vw)
*/


/* 
? Font Properties
* 1. Font Family    (Comma seperated values and written in quotes)
* 2. Font Size
* 3. Font Weight    [100-900]
* 4. Font Style     [italic]
* 5. Font Variant   [small-caps]

* @font-face {
*     font-family: "Name";
*     src: url(./fonts/font.otf) format('opentype');
* }

? Font Formats
*   * True Type Fonts (.ttf)                    format - 'truetype'
*   * Open Type Fonts (.otf)                    format - 'opentype'
*   * WOFF/WOFF2 Fonts (.woff/.woff2)           format - 'woff/woff2'
*   * Embedded Open Type Fonts (.eot)           format - 'embedded-opentype'
*   * Scalable Vector Graphic Fonts (.svg)      format - 'svg'
*/



/* 
? Text Properties
* Text Align            [left, right, center, justify]
* Text Decoration       [underline, overline, line-through, none]
* Text Transform        [uppercase, lowercase, capitalize]
* Text Spacing
*    1. Letter Spacing
*    2. Word Spacing
*    3. Line Height
*    4. white-space         [nowrap]
* Text Shadow           [offsetX - offsetY - blurRadius - color]
*/



/* 
? Padding, Margin, Border in CSS
* Border                [width - style - color]
* Border Radius         [top-left top-right bottom-right bottom-left]
* Padding               [top-left top-right bottom-right bottom-left]
* Margin                [top-left top-right bottom-right bottom-left]
*/



/* 
? Box Sizing in CSS
* It specifies how the given width should be interpreted
* Box Sizing            [border-box content-box]

* If we set width with content box, it means the width of content should be equal to the specified width. But if we set width with border box, it means the width after including margin, border and padding should be equal to the specified width
*/



/* 
? CSS Gradient
* linear-gradient(to direction/angle, more than 2 color stops)
* direction = [bottom right, top right, top left, bottom left ,right, left, bottom, top (default)]
* angle     = [deg, rad]

* repeating-linear-gradient(same as linear-gradient, size after which gradient should repeat)

* radial gradient(shape, more than 2 color stops)
* shape = [ellipse, circle]

* we also have repeating-radial-gradient
*/



/* 
? Box Shadow
* [OffsetX - OffsetY - BlurRadius - Spread/Density - Color]

? Drop Shadow
* filter: drop-shadow(OffsetX - OffsetY - BlurRadius - Color)
*/



/* 
? Filters in CSS
* Grayscale()
* Blur()
* Opacity()
* Contrast()
* Brightness()
* Invert()
* Saturation()
* Hue-rotate()
* Sepia()
*/



/*
? List Properties
* list-style-type
* list-style-image
* list-style-position
* list-style-property
*/



/* 
? Anchor States in CSS
* a:link
* a:hover
* a:visited
* a:focus
* a:visited
*/


/* 
!! Combinators in CSS
* Decendent  Selector (Space)
* Child Selector (>)
* Adjacent Sibling Selector (+)
* General Sibling Selector (~)
* Universal Selector (*)
*/


/* 
? Displays in CSS
* Block
* Inline
* Inline-Block
* None
*/



/* 
? Positions in CSS
* Static
* Relative
* Absolute
* Fixed
* Sticky
*/


/* 
? Overflow in CSS
* visible
* auto
* scroll
* hidden
*/


/* 
? Z-Index in CSS
* It specifies the stacking order in elements
* Like which element should be above and which should be below
https://youtu.be/MSICFljRcb4?t=21611
*/


/* 
! Column Layout in CSS   (NEW) [Newspaper Style (add text-align:justify)]
* column-count
* column-gap
* column-rule               [same values as border]
* column-fill
*/



/* 
! Flexbox in CSS   (NEW)

? Flexbox Container or Parent Properties
* display: flex;
* flex-direction        [row (default), column, row-reverse, column-reverse]
It sets the main-axis as row or column, the other one becomes cross-axis
* justify-content       [center, flex-end, flex-start, space-between, space-around, space-evenly]
* align-items           [center, flex-end, flex-start,strech, baseline]
* flex-wrap             [nowrap (default), wrap, wrap-reverse]
* align-content         [Same as justify content but this only works when flex-wrap is not set to nowrap]

? Flexbox Item or Child Properties
* flex-grow             [if there is extra space, then elements with flex grow more than 1 will increase in dimensions faster]
* flex-shrink           [if there is less space, then elements with flex shrink more than 1 will decrease in dimensions faster]
*/



/* 
! Grid Layout in CSS    (NEW)
 
*/



/* 
? Transitions in CSS
* transition-property
* transition-duration
* transition-timing-function    [ease, ease-in, ease-out, ease-in-out, linear, cubic-bezier()]
* transition-delay
*/


/* 
? Transform in CSS
* rotate
* skew
* scale
* translate
* perspective  (To create a 3d space)

* transform-origin
*/




/* 
? Animations in CSS
* animation-name
* animation-duration
* animation-timing-function    [ease, ease-in, ease-out, ease-in-out, linear, cubic-bezier()]
* animation-delay
* animation-direction
* animation-iteration-count
* animation-fill-mode
*/




/* 
? CSS Variables
* --variable-name: value;
TODO property: var(--variable-name);
*/


/* 
! Specificity in CSS
* !important
* Inline Style
* Id
* Class or Pseudo-class or Data-Attribute
* Element or Psudo-element
* * (universal selector) [has 0 specificity]
?                         Inline   Class
?                            |       |
TODO -> Represented as ( _ , _ , _ , _ , _ )
?                        |       |       |
?                  !important    Id      Tag
*/



/* 
? New CSS Features
! Selectors
* :is() / :matches()
* :has()
* :where() [same as is but with 0 specificity]
* :not()

* Media Query Range Syntax

* Container Queries

* Accent Color

* Aspect-Ratio
? aspect-ratio : 1; (square)
? aspect-ratio : calc(16 / 9); (16:9)

* Scroll-Snap


* Individual Transform Properties
? scale
? perspective
? translate
? rotate
? skew

* CSS Nesting
? Allows to write CSS for child element inside the CSS selector of parent element

* Gap Property for Flexbox
? gap

* CSS Logical Properties (inline and block)
? border-inline (shorthand for border-left and border-right)
? border-block  (shorthand for border-top and border-bottom)

* CSS Writing Mode
? To write text in different different ways live vertically, etc

* focus-visible
* floats (not much uselful)

* Clip-path
? ******************************************************************
*/



/*
!####################################################################
!############################# PART - 2 #############################
!####################################################################
*/





/* 
? https://www.youtube.com/playlist?list=PLEYW3pZS6IQ_a-iYAno4VsZonrikphq8L
https://www.youtube.com/watch?v=iJHASLCXA-w&list=RDPadwEAB3Zgs&index=5
? https://youtu.be/xAsWteYn1no&t=4013
? https://youtu.be/k51W7bz7LQU?list=PLwGdqUZWnOp1Rab71vx2zMF6qpwGDB2Z1&t=10  

https://www.youtube.com/watch?v=4EDbe3lhHOM&list=PLauivoElc3ggagradg8MfOZreCMmXMmJ-&index=31
*/